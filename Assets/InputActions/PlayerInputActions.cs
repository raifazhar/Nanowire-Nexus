//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputActions/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Spider"",
            ""id"": ""eeca1148-97e5-4258-b739-77b7442302f9"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""db53d099-7736-40cd-8628-ce8b07c98255"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SwitchToHuman"",
                    ""type"": ""Button"",
                    ""id"": ""711d564d-7ee5-4db7-b523-af3e7dea5486"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseLook"",
                    ""type"": ""Value"",
                    ""id"": ""552d10c1-1ef5-47ae-8d47-8a0b72720c6e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""53c7d562-e72e-4979-84df-6b5eaf79938c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""80588391-a797-416e-bc35-1300eae360b8"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""eeb1b741-abf9-41d3-94d0-dd14c7cfd194"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""23a3d478-760d-4ad0-b01b-b74bdf546302"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""19a3c235-c468-4796-bc93-40274e8f2ce8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""82dd7533-546e-422a-9bc2-ac97db22b936"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f3be047b-6234-4034-af4e-9d4b6d2ae933"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchToHuman"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cbf018ee-fb86-4789-8d31-27d98ef0b99e"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b91ebee8-5ecf-46d1-bc56-bc0e14f733b2"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerMinigames"",
            ""id"": ""3d741d03-e982-4110-9da1-b5068f9b495f"",
            ""actions"": [
                {
                    ""name"": ""Submit"",
                    ""type"": ""Button"",
                    ""id"": ""1dc5dcea-dc65-4fce-9a37-6cd3e5ffb236"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchToSpider"",
                    ""type"": ""Button"",
                    ""id"": ""0ccbccd0-fadf-474b-9b03-cd6749404b5d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Help"",
                    ""type"": ""Button"",
                    ""id"": ""46d53640-db70-46db-bbd7-b86eb3ab56ad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""dfbd657a-a958-43db-8d9f-f823e19c8837"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6c1d44c9-0ade-4fe3-802a-5cf622018670"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchToSpider"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e9b814c9-47db-4308-ace9-7255f03f81d8"",
                    ""path"": ""<Keyboard>/leftAlt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Help"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Human"",
            ""id"": ""6b387c6f-2381-4bd2-874e-5f162594efd7"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""0c13c883-11eb-4ace-8092-d8a5f8b6f8ad"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""f194c92b-364b-4d58-9669-effd878e5270"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""HumanInteract"",
                    ""type"": ""Button"",
                    ""id"": ""6ee0d0df-c2c5-4f62-89bd-2a5e3604f4dc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""bd19825e-6ffe-4942-a3aa-08c69ff71bb8"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4444f5bb-6133-4efa-92f2-0c90bf1f409e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c27106e9-7d44-4fb3-b15b-a734e9a0c5f5"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a0d7f8d3-d606-4c53-93db-5200866c46f7"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""32d634ee-92d8-4d6f-9d7d-2ac1de52ebc8"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""784c4ed4-b482-4e3d-ae65-807573126b2e"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4d73bb11-b22f-45be-89d7-dd2a8f75657f"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HumanInteract"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Spider
        m_Spider = asset.FindActionMap("Spider", throwIfNotFound: true);
        m_Spider_Movement = m_Spider.FindAction("Movement", throwIfNotFound: true);
        m_Spider_SwitchToHuman = m_Spider.FindAction("SwitchToHuman", throwIfNotFound: true);
        m_Spider_MouseLook = m_Spider.FindAction("MouseLook", throwIfNotFound: true);
        m_Spider_Interact = m_Spider.FindAction("Interact", throwIfNotFound: true);
        // PlayerMinigames
        m_PlayerMinigames = asset.FindActionMap("PlayerMinigames", throwIfNotFound: true);
        m_PlayerMinigames_Submit = m_PlayerMinigames.FindAction("Submit", throwIfNotFound: true);
        m_PlayerMinigames_SwitchToSpider = m_PlayerMinigames.FindAction("SwitchToSpider", throwIfNotFound: true);
        m_PlayerMinigames_Help = m_PlayerMinigames.FindAction("Help", throwIfNotFound: true);
        // Human
        m_Human = asset.FindActionMap("Human", throwIfNotFound: true);
        m_Human_Movement = m_Human.FindAction("Movement", throwIfNotFound: true);
        m_Human_Look = m_Human.FindAction("Look", throwIfNotFound: true);
        m_Human_HumanInteract = m_Human.FindAction("HumanInteract", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Spider
    private readonly InputActionMap m_Spider;
    private List<ISpiderActions> m_SpiderActionsCallbackInterfaces = new List<ISpiderActions>();
    private readonly InputAction m_Spider_Movement;
    private readonly InputAction m_Spider_SwitchToHuman;
    private readonly InputAction m_Spider_MouseLook;
    private readonly InputAction m_Spider_Interact;
    public struct SpiderActions
    {
        private @PlayerInputActions m_Wrapper;
        public SpiderActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Spider_Movement;
        public InputAction @SwitchToHuman => m_Wrapper.m_Spider_SwitchToHuman;
        public InputAction @MouseLook => m_Wrapper.m_Spider_MouseLook;
        public InputAction @Interact => m_Wrapper.m_Spider_Interact;
        public InputActionMap Get() { return m_Wrapper.m_Spider; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SpiderActions set) { return set.Get(); }
        public void AddCallbacks(ISpiderActions instance)
        {
            if (instance == null || m_Wrapper.m_SpiderActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SpiderActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @SwitchToHuman.started += instance.OnSwitchToHuman;
            @SwitchToHuman.performed += instance.OnSwitchToHuman;
            @SwitchToHuman.canceled += instance.OnSwitchToHuman;
            @MouseLook.started += instance.OnMouseLook;
            @MouseLook.performed += instance.OnMouseLook;
            @MouseLook.canceled += instance.OnMouseLook;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
        }

        private void UnregisterCallbacks(ISpiderActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @SwitchToHuman.started -= instance.OnSwitchToHuman;
            @SwitchToHuman.performed -= instance.OnSwitchToHuman;
            @SwitchToHuman.canceled -= instance.OnSwitchToHuman;
            @MouseLook.started -= instance.OnMouseLook;
            @MouseLook.performed -= instance.OnMouseLook;
            @MouseLook.canceled -= instance.OnMouseLook;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
        }

        public void RemoveCallbacks(ISpiderActions instance)
        {
            if (m_Wrapper.m_SpiderActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISpiderActions instance)
        {
            foreach (var item in m_Wrapper.m_SpiderActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SpiderActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SpiderActions @Spider => new SpiderActions(this);

    // PlayerMinigames
    private readonly InputActionMap m_PlayerMinigames;
    private List<IPlayerMinigamesActions> m_PlayerMinigamesActionsCallbackInterfaces = new List<IPlayerMinigamesActions>();
    private readonly InputAction m_PlayerMinigames_Submit;
    private readonly InputAction m_PlayerMinigames_SwitchToSpider;
    private readonly InputAction m_PlayerMinigames_Help;
    public struct PlayerMinigamesActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerMinigamesActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Submit => m_Wrapper.m_PlayerMinigames_Submit;
        public InputAction @SwitchToSpider => m_Wrapper.m_PlayerMinigames_SwitchToSpider;
        public InputAction @Help => m_Wrapper.m_PlayerMinigames_Help;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMinigames; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMinigamesActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMinigamesActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMinigamesActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMinigamesActionsCallbackInterfaces.Add(instance);
            @Submit.started += instance.OnSubmit;
            @Submit.performed += instance.OnSubmit;
            @Submit.canceled += instance.OnSubmit;
            @SwitchToSpider.started += instance.OnSwitchToSpider;
            @SwitchToSpider.performed += instance.OnSwitchToSpider;
            @SwitchToSpider.canceled += instance.OnSwitchToSpider;
            @Help.started += instance.OnHelp;
            @Help.performed += instance.OnHelp;
            @Help.canceled += instance.OnHelp;
        }

        private void UnregisterCallbacks(IPlayerMinigamesActions instance)
        {
            @Submit.started -= instance.OnSubmit;
            @Submit.performed -= instance.OnSubmit;
            @Submit.canceled -= instance.OnSubmit;
            @SwitchToSpider.started -= instance.OnSwitchToSpider;
            @SwitchToSpider.performed -= instance.OnSwitchToSpider;
            @SwitchToSpider.canceled -= instance.OnSwitchToSpider;
            @Help.started -= instance.OnHelp;
            @Help.performed -= instance.OnHelp;
            @Help.canceled -= instance.OnHelp;
        }

        public void RemoveCallbacks(IPlayerMinigamesActions instance)
        {
            if (m_Wrapper.m_PlayerMinigamesActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMinigamesActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMinigamesActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMinigamesActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMinigamesActions @PlayerMinigames => new PlayerMinigamesActions(this);

    // Human
    private readonly InputActionMap m_Human;
    private List<IHumanActions> m_HumanActionsCallbackInterfaces = new List<IHumanActions>();
    private readonly InputAction m_Human_Movement;
    private readonly InputAction m_Human_Look;
    private readonly InputAction m_Human_HumanInteract;
    public struct HumanActions
    {
        private @PlayerInputActions m_Wrapper;
        public HumanActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Human_Movement;
        public InputAction @Look => m_Wrapper.m_Human_Look;
        public InputAction @HumanInteract => m_Wrapper.m_Human_HumanInteract;
        public InputActionMap Get() { return m_Wrapper.m_Human; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HumanActions set) { return set.Get(); }
        public void AddCallbacks(IHumanActions instance)
        {
            if (instance == null || m_Wrapper.m_HumanActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HumanActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @HumanInteract.started += instance.OnHumanInteract;
            @HumanInteract.performed += instance.OnHumanInteract;
            @HumanInteract.canceled += instance.OnHumanInteract;
        }

        private void UnregisterCallbacks(IHumanActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @HumanInteract.started -= instance.OnHumanInteract;
            @HumanInteract.performed -= instance.OnHumanInteract;
            @HumanInteract.canceled -= instance.OnHumanInteract;
        }

        public void RemoveCallbacks(IHumanActions instance)
        {
            if (m_Wrapper.m_HumanActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHumanActions instance)
        {
            foreach (var item in m_Wrapper.m_HumanActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HumanActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HumanActions @Human => new HumanActions(this);
    public interface ISpiderActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnSwitchToHuman(InputAction.CallbackContext context);
        void OnMouseLook(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
    public interface IPlayerMinigamesActions
    {
        void OnSubmit(InputAction.CallbackContext context);
        void OnSwitchToSpider(InputAction.CallbackContext context);
        void OnHelp(InputAction.CallbackContext context);
    }
    public interface IHumanActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnHumanInteract(InputAction.CallbackContext context);
    }
}
